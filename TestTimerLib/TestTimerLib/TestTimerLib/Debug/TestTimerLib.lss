
TestTimerLib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000800  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000318  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000af  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
#define CLK 16000000
#define TOP 249

volatile unsigned long timer1_millis;

ISR(TIMER1_COMPA_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	timer1_millis++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <_Z10initMillisv>:

void initMillis(){
	TCCR1B = (1 <<WGM12) | (1 << CS10) | (1 << CS11);
  da:	8b e0       	ldi	r24, 0x0B	; 11
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1A = 249;
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0;
  ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = 1<<OCIE1A;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	sei();
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  fe:	f8 94       	cli
}

unsigned long millis(){
	unsigned long millis_return;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
 100:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 104:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 110:	78 94       	sei
	}
	return millis_return;
}
 112:	08 95       	ret

00000114 <_Z5setupv>:
#include "millisFunc.h"
#include "bitOp.h"
#include "myDelay.h"

void setup(){
	SET(DDRD, 7);
 114:	57 9a       	sbi	0x0a, 7	; 10
	SET(PORTD, 7);
 116:	5f 9a       	sbi	0x0b, 7	; 11
 118:	08 95       	ret

0000011a <main>:
}

int main(void)
{
	setup();
 11a:	0e 94 8a 00 	call	0x114	; 0x114 <_Z5setupv>
	initMillis();
 11e:	0e 94 6d 00 	call	0xda	; 0xda <_Z10initMillisv>
	unsigned long pre_millis;
	pre_millis = millis();
 122:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z6millisv>
 126:	6b 01       	movw	r12, r22
 128:	7c 01       	movw	r14, r24
    /* Replace with your application code */
    while (1) 
    {
		if (millis() - pre_millis > 500)
 12a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z6millisv>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	8c 19       	sub	r24, r12
 134:	9d 09       	sbc	r25, r13
 136:	ae 09       	sbc	r26, r14
 138:	bf 09       	sbc	r27, r15
 13a:	85 3f       	cpi	r24, 0xF5	; 245
 13c:	91 40       	sbci	r25, 0x01	; 1
 13e:	a1 05       	cpc	r26, r1
 140:	b1 05       	cpc	r27, r1
 142:	98 f3       	brcs	.-26     	; 0x12a <main+0x10>
		{
			INV(PORTD, 7);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	80 58       	subi	r24, 0x80	; 128
 148:	8b b9       	out	0x0b, r24	; 11
			pre_millis = millis();
 14a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z6millisv>
 14e:	6b 01       	movw	r12, r22
 150:	7c 01       	movw	r14, r24
 152:	eb cf       	rjmp	.-42     	; 0x12a <main+0x10>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
