
servoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800200  00800200  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d70  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c7  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 30       	cpi	r26, 0x06	; 6
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	54 d0       	rcall	.+168    	; 0x1ae <main>
 106:	99 c0       	rjmp	.+306    	; 0x23a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z10setupServov>:
unsigned int Gia_tri_moi;
int a = 0 ;
int b = 0 ;
void setupServo(){
	// TIMER1 FOR SERVO CONTROL
	TCNT1 = 0;
 10a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 10e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1A = 0 ;TCCR1B = 0;
 112:	a0 e8       	ldi	r26, 0x80	; 128
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	1c 92       	st	X, r1
 118:	e1 e8       	ldi	r30, 0x81	; 129
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
	SET(DDRB, 5);
 11e:	25 9a       	sbi	0x04, 5	; 4
	CLR(PORTB, 5);
 120:	2d 98       	cbi	0x05, 5	; 5
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) ;
 122:	8c 91       	ld	r24, X
 124:	82 68       	ori	r24, 0x82	; 130
 126:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10); 
 128:	80 81       	ld	r24, Z
 12a:	89 61       	ori	r24, 0x19	; 25
 12c:	80 83       	st	Z, r24
	TIMSK1 = 0;
 12e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 8480;
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	91 e2       	ldi	r25, 0x21	; 33
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	ICR1 = 65535;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 146:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	CLR(PRR0, 3);
 14a:	e4 e6       	ldi	r30, 0x64	; 100
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	80 83       	st	Z, r24
	// TIMER3 FOR MAIN LOOP
	TCCR3A = 0; TCCR3B = 0;
 154:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 158:	e1 e9       	ldi	r30, 0x91	; 145
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	10 82       	st	Z, r1
	TCCR3B |= (1 << WGM32) | (1 << CS32) | (1 << CS30);
 15e:	80 81       	ld	r24, Z
 160:	8d 60       	ori	r24, 0x0D	; 13
 162:	80 83       	st	Z, r24
	TIMSK3 = 0;
 164:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	TCNT3 = 0;
 168:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 16c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	OCR3A = 46875;
 170:	8b e1       	ldi	r24, 0x1B	; 27
 172:	97 eb       	ldi	r25, 0xB7	; 183
 174:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 178:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	CLR(PRR1, 3);
 17c:	e5 e6       	ldi	r30, 0x65	; 101
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	80 83       	st	Z, r24
	
	sei();	
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <_Z3setj>:
}

void set(unsigned int x)
{
	if (Gia_tri_moi != x) {
 18a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 18e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	51 f0       	breq	.+20     	; 0x1ac <_Z3setj+0x22>
		OCR1A = x;
 198:	e8 e8       	ldi	r30, 0x88	; 136
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24
		Gia_tri_moi = OCR1A;
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ac:	08 95       	ret

000001ae <main>:
	}
}*/

int main(void)
{
	setupServo();
 1ae:	ad df       	rcall	.-166    	; 0x10a <_Z10setupServov>
 1b0:	c0 ed       	ldi	r28, 0xD0	; 208
 1b2:	d7 e0       	ldi	r29, 0x07	; 7
    /* Replace with your application code */
    while (1) 
    {
		set(8480);
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	91 e2       	ldi	r25, 0x21	; 33
 1b8:	e8 df       	rcall	.-48     	; 0x18a <_Z3setj>
 */ 

#include<avr/cpufunc.h>
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	80 ed       	ldi	r24, 0xD0	; 208
 1c0:	97 e0       	ldi	r25, 0x07	; 7
	while (_iteratorI < delayTime) {
		_iteratorJ = 0;
		while(_iteratorJ < 2000) {
			_NOP();
 1c2:	00 00       	nop
			_NOP();
 1c4:	00 00       	nop
			_NOP();
 1c6:	00 00       	nop
 1c8:	01 97       	sbiw	r24, 0x01	; 1
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
	while (_iteratorI < delayTime) {
		_iteratorJ = 0;
		while(_iteratorJ < 2000) {
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x14>
			_NOP();
			_NOP();
			_NOP();
			_iteratorJ++;
		}
		_iteratorI++;
 1cc:	c9 01       	movw	r24, r18
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255

#include<avr/cpufunc.h>
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
	while (_iteratorI < delayTime) {
 1d2:	ac 01       	movw	r20, r24
 1d4:	09 2e       	mov	r0, r25
 1d6:	00 0c       	add	r0, r0
 1d8:	66 0b       	sbc	r22, r22
 1da:	77 0b       	sbc	r23, r23
 1dc:	40 3d       	cpi	r20, 0xD0	; 208
 1de:	57 40       	sbci	r21, 0x07	; 7
 1e0:	61 05       	cpc	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	60 f3       	brcs	.-40     	; 0x1be <main+0x10>
 1e6:	d0 93 03 02 	sts	0x0203, r29	; 0x800203 <_iteratorJ+0x1>
 1ea:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <_iteratorJ>
 1ee:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_iteratorI+0x1>
 1f2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_iteratorI>
		delay_ms(2000);
		set(38550);
 1f6:	86 e9       	ldi	r24, 0x96	; 150
 1f8:	96 e9       	ldi	r25, 0x96	; 150
 1fa:	c7 df       	rcall	.-114    	; 0x18a <_Z3setj>
 */ 

#include<avr/cpufunc.h>
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	80 ed       	ldi	r24, 0xD0	; 208
 202:	97 e0       	ldi	r25, 0x07	; 7
	while (_iteratorI < delayTime) {
		_iteratorJ = 0;
		while(_iteratorJ < 2000) {
			_NOP();
 204:	00 00       	nop
			_NOP();
 206:	00 00       	nop
			_NOP();
 208:	00 00       	nop
 20a:	01 97       	sbiw	r24, 0x01	; 1
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
	while (_iteratorI < delayTime) {
		_iteratorJ = 0;
		while(_iteratorJ < 2000) {
 20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x56>
			_NOP();
			_NOP();
			_NOP();
			_iteratorJ++;
		}
		_iteratorI++;
 20e:	c9 01       	movw	r24, r18
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255

#include<avr/cpufunc.h>
int _iteratorI, _iteratorJ;
inline void delay_ms(uint32_t delayTime) {
	_iteratorI = 0;
	while (_iteratorI < delayTime) {
 214:	ac 01       	movw	r20, r24
 216:	09 2e       	mov	r0, r25
 218:	00 0c       	add	r0, r0
 21a:	66 0b       	sbc	r22, r22
 21c:	77 0b       	sbc	r23, r23
 21e:	40 3d       	cpi	r20, 0xD0	; 208
 220:	57 40       	sbci	r21, 0x07	; 7
 222:	61 05       	cpc	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	60 f3       	brcs	.-40     	; 0x200 <main+0x52>
 228:	d0 93 03 02 	sts	0x0203, r29	; 0x800203 <_iteratorJ+0x1>
 22c:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <_iteratorJ>
 230:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_iteratorI+0x1>
 234:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_iteratorI>
 238:	bd cf       	rjmp	.-134    	; 0x1b4 <main+0x6>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
